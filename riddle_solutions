#--------Challenge 0----------#
touch .hello_there

#--------Challenge 1----------#
chmod 444 .hello_there

#--------Challenge 2----------#
Ctrl+Z
fg (εντός των 10sec προτού χτυπήσει ο alarm)
//Ακόμα και αν το η διεργασία γίνει SIGSTP στον kernel συνεχίζει το countdown 
//και όταν τα 10sec παρέλθουν στέλνεται SIGALARM, το οποίο θα παραληφθεί από τη διεργασία όταν δεχθεί SIGCONT 

#--------Challenge 2 (εναλλακτική)----------#
Ctrl+Z
ps (για εύρεση PID)
kill -18 PID (-18 == -SIGCONT)

#--------Challenge 3----------#
export ANSWER='42'

#--------Challenge 4----------#
mkfifo magic_mirror

//Ένα named pipe (ή FIFO – First In First Out) είναι ένας ειδικός τύπος αρχείου στο Unix/Linux, 
που επιτρέπει επικοινωνία μεταξύ διεργασιών (Inter-Process Communication, IPC).
//Η διαφορά του από ένα “κανονικό” pipe (|) είναι ότι το named pipe έχει όνομα στο filesystem 
— δηλαδή υπάρχει ως αρχείο που μπορείς να βλέπεις και να ανοίγεις από διαφορετικά προγράμματα ή τερματικά.
//Blocking I/O. Αν δεν υπάρχει αναγνώστης ή γράφων, οι διεργασίες περιμένουν.

#--------Challenge 5----------#
aux5.c

#include <unistd.h>
#include <fcntl.h>

int main() {
        int fd = open("test", O_RDWR|O_CREAT, 0644);
        dup2(fd, 99);

        int p = fork();

        if (p == 0) {
                char *args[] = {"/home/mike/Documents/mike/OSLab/1st_Exercise_upd/riddle", NULL};
                char *env[]  = {NULL};

                execve("/home/mike/Documents/mike/OSLab/1st_Exercise_upd/riddle/riddle", args, env);
        }
        else pause();
}


#--------Challenge 5 (εναλλακτική)----------#
aux5_alt.c

#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>

int main() {
        int fd = open("test", O_RDWR|O_CREAT, 0644);
        dup2(fd, 99);
        system("./riddle");
}

#--------Challenge 6----------#
aux6.c

#include <unistd.h>
#include <stdlib.h>

int main() {
        int pipe1[2];
        int pipe2[2];

        pipe(pipe1);
        dup2(pipe1[0],33);
        dup2(pipe1[1],34);

        pipe(pipe2);
        dup2(pipe2[0],53);
        dup2(pipe2[1],54);

        system("./riddle");
}

#--------Challenge 6 (εναλλακτική)----------#
ΛΕΙΠΕΙ

#--------Challenge 7----------#
ln .hello_there .hey_there
//ln TARGET LINK_NAME

#--------Challenge 8----------#
touch bf00
truncate -s 1G bf00
echo '1' >> bf00
ln bf00 bf01
.
.
.
ln bf00 bf09

#--------Challenge 9----------#
//ανοίγω ένα τερματικό (χωρίς να τρέξω riddle) και εκτελώ την εντολή
nc -l 49842 //open server which listens to port 49842
//Ανοίγω άλλο terminal και τρέχω riddle που θα γίνει ο client.
//Καθώς τρέχω το riddle, ο κώδικας του riddle εκτελεί τις εντολές socket και connect, για να δημιουργήσει ένα end_point
//και να συνδεθεί στην port 48942 που έχει ανοίξει το πρώτο terminal

----- γενικά για επικοιν. μεταξύ terminals
//(1ο terminal) nc -l 48942
//(2o terminal) nc 127.0.0.1 48942  
